- block:
  - failed_when: false
    name: Get cinder_volume image id currently used by pacemaker
    register: cinder_volume_image_current_res
    shell: pcs resource config openstack-cinder-volume | grep -Eo 'image=[^ ]+' |
      awk -F= '{print $2;}'
  - name: cinder_volume image facts
    set_fact:
      cinder_volume_image_current: '{{cinder_volume_image_current_res.stdout}}'
      cinder_volume_image_latest: cluster.common.tag/default-dev-osp16-2-osp16_containers-cinder-volume:pcmklatest
  - import_role:
      name: tripleo-container-tag
    name: Temporarily tag the current cinder_volume image id with the upgraded image
      name
    vars:
      container_image: '{{cinder_volume_image_current}}'
      container_image_latest: '{{cinder_volume_image_latest}}'
      pull_image: false
    when:
    - cinder_volume_image_current != ''
    - cinder_volume_image_current != cinder_volume_image_latest
  - changed_when: false
    failed_when: false
    name: Check openstack-cinder-volume cluster resource status
    register: cinder_volume_pcs_res_result
    shell: pcs resource config openstack-cinder-volume
  - name: Set fact cinder_volume_pcs_res
    set_fact:
      cinder_volume_pcs_res: '{{cinder_volume_pcs_res_result.rc == 0}}'
  - name: set is_cinder_volume_bootstrap_node fact
    set_fact: is_cinder_volume_bootstrap_node={{cinder_volume_short_bootstrap_node_name|lower
      == ansible_facts['hostname']|lower}}
    tags: common
  name: Prepare switch of cinder_volume image name
  when:
  - step|int == 0
- block:
  - failed_when: false
    name: Get haproxy image id currently used by pacemaker
    register: haproxy_image_current_res
    shell: pcs resource config haproxy-bundle | grep -Eo 'image=[^ ]+' | awk -F= '{print
      $2;}'
  - name: Image facts for haproxy
    set_fact:
      haproxy_image_current: '{{haproxy_image_current_res.stdout}}'
      haproxy_image_latest: cluster.common.tag/default-dev-osp16-2-osp16_containers-haproxy:pcmklatest
  - import_role:
      name: tripleo-container-tag
    name: Temporarily tag the current haproxy image id with the upgraded image name
    vars:
      container_image: '{{haproxy_image_current}}'
      container_image_latest: '{{haproxy_image_latest}}'
      pull_image: false
    when:
    - haproxy_image_current != ''
    - haproxy_image_current != haproxy_image_latest
  - changed_when: false
    failed_when: false
    name: Check haproxy cluster resource status
    register: haproxy_pcs_res_result
    shell: pcs resource config haproxy-bundle
  - name: Set upgrade haproxy facts
    set_fact:
      haproxy_pcs_res: '{{haproxy_pcs_res_result.rc == 0}}'
      is_haproxy_bootstrap_node: '{{haproxy_short_bootstrap_node_name|lower == ansible_facts[''hostname'']|lower}}'
  name: Prepare switch of haproxy image name
  when:
  - step|int == 0
- block:
  - file:
      mode: 1777
      path: /var/tmp
      setype: tmp_t
      state: directory
    name: Reset selinux label on /var/tmp
  name: Anchor for upgrade and update tasks
  when: step|int == 0
- name: Gather missing facts
  setup:
    gather_subset: distribution
  tags:
  - never
  - nova_hybrid_state
  when: ansible_facts['distribution'] is not defined or ansible_facts['distribution_major_version']
    is not defined
- block:
  - failed_when: false
    name: Check if iscsid is running with proper image
    register: hybrid_iscsid
    shell: 'docker ps | grep "{{iscsid_image}}"

      '
  - block:
    - name: Update the iscsid paunch image in config
      shell: 'set -o pipefail

        jq ''.iscsid.image = "{{ iscsid_image }}" | {"iscsid": .iscsid }'' \

        /var/lib/tripleo-config/docker-container-startup-config-step_3.json >\

        /var/lib/tripleo-config/docker-container-hybrid_iscsid.json

        '
    - lineinfile:
        dest: /etc/hosts
        line: '{{ undercloud_hosts_entries | join('''') }}'
        state: present
      name: Make sure the Undercloud hostname is included in /etc/hosts
      when:
      - undercloud_hosts_entries is defined
    - name: Set container_registry_insecure_registries fact.
      set_fact:
        container_registry_insecure_registries:
        - satellite.mgmt.tmeprj2.comm.red.ibm.gsc:5000
    - ini_file:
        option: registries
        path: /etc/containers/registries.conf
        section: registries.insecure
        value: '{{ container_registry_insecure_registries }}'
      name: Set container_registry_insecure registries
      register: ini_read_result
      when: container_registry_insecure_registries != []
    - args:
        executable: /usr/bin/bash
      name: Restart docker and apply the paunch config
      shell: "set -o pipefail\n# Get list of running containers\nRUNNING=\"$( docker\
        \ ps --format '{{ '{{' }}.Names{{ '}}' }}' )\"\n# Restart docker\nsystemctl\
        \ restart docker\n# Compare running containers now vs before\nTO_STOP=\"$(grep\
        \ -v -f <(echo \"${RUNNING}\")  <(docker ps --format '{{ '{{' }}.Names{{ '}}'\
        \ }}'))\"\n# Check if we need to stop anything and stop it\nif [ -n \"${TO_STOP}\"\
        \ ]; then\n  echo \"${TO_STOP}\" | xargs -r docker stop\nfi\n"
      when:
      - container_registry_insecure_registries != []
      - ini_read_result is changed
    - docker_container:
        name: iscsid
        state: absent
      name: Remove iscsid container before applying new paunch config
    - name: Apply paunch config for iscsid
      shell: paunch apply --file /var/lib/tripleo-config/docker-container-hybrid_iscsid.json
        --config-id hybrid_iscsid
    name: Implement the hybrid state (only if the compute is still Queens)
    when: hybrid_iscsid.rc != 0
  name: Switch iscsid to hybrid state
  tags:
  - never
  - nova_hybrid_state
  vars:
    iscsid_image: satellite.mgmt.tmeprj2.comm.red.ibm.gsc:5000/default-dev-osp16-2-osp16_containers-iscsid:16.2
  when:
  - step|int == 0
  - ansible_facts['distribution'] == 'RedHat'
  - ansible_facts['distribution_major_version'] is version('7', '==')
- block:
  - failed_when: false
    name: Get galera image id currently used by pacemaker
    register: galera_image_current_res
    shell: pcs resource config galera-bundle | grep -Eo 'image=[^ ]+' | awk -F= '{print
      $2;}'
  - name: Image facts for galera
    set_fact:
      galera_image_current: '{{galera_image_current_res.stdout}}'
      galera_image_latest: cluster.common.tag/default-dev-osp16-2-osp16_containers-mariadb:pcmklatest
  - import_role:
      name: tripleo-container-tag
    name: Temporarily tag the current galera image id with the upgraded image name
    vars:
      container_image: '{{galera_image_current}}'
      container_image_latest: '{{galera_image_latest}}'
      pull_image: false
    when:
    - galera_image_current != ''
    - galera_image_current != galera_image_latest
  - changed_when: false
    failed_when: false
    name: Check galera cluster resource status
    register: galera_pcs_res_result
    shell: pcs resource config galera-bundle
  - name: Set fact galera_pcs_res
    set_fact:
      galera_pcs_res: '{{galera_pcs_res_result.rc == 0}}'
  - name: set is_mysql_bootstrap_node fact
    set_fact: is_mysql_bootstrap_node={{mysql_short_bootstrap_node_name|lower == ansible_facts['hostname']|lower}}
    tags: common
  name: Prepare switch of galera image name
  when:
  - step|int == 0
- block:
  - become: true
    delegate_to: '{{ mysql_short_bootstrap_node_name }}'
    name: check flag file existence in destination host
    register: tripleo_transfer_flag_stat
    stat:
      path: /var/lib/tripleo/transfer-flags/var-lib-mysql
  - name: Set fact cluster_recreate
    set_fact:
      cluster_recreate: '{{ tripleo_transfer_flag_stat.stat.exists|bool }}'
  - async: 30
    name: Check pacemaker cluster running before upgrade
    pacemaker_cluster: state=online check_and_fail=true
    poll: 4
    tags: validation
    when: not cluster_recreate|bool
  name: upgrade step 0
  when: step|int == 0
- block:
  - failed_when: false
    name: Get rabbitmq image id currently used by pacemaker
    register: rabbitmq_image_current_res
    shell: pcs resource config rabbitmq-bundle | grep -Eo 'image=[^ ]+' | awk -F=
      '{print $2;}'
  - name: Image facts for rabbitmq
    set_fact:
      rabbitmq_image_current: '{{rabbitmq_image_current_res.stdout}}'
      rabbitmq_image_latest: cluster.common.tag/default-dev-osp16-2-osp16_containers-rabbitmq:pcmklatest
  - block:
    - import_role:
        name: tripleo-container-tag
      name: Temporarily tag the current rabbitmq image id with the upgraded image
        name
      vars:
        container_image: '{{rabbitmq_image_current}}'
        container_image_latest: '{{rabbitmq_image_latest}}'
        pull_image: false
      when:
      - rabbitmq_image_current != ''
      - rabbitmq_image_current != rabbitmq_image_latest
    name: Prepare the switch to new rabbitmq container image name in pacemaker
  - failed_when: false
    name: Check rabbitmq cluster resource status
    register: rabbitmq_pcs_res_result
    shell: pcs resource config rabbitmq-bundle
  - name: Set fact rabbitmq_pcs_res
    set_fact:
      rabbitmq_pcs_res: '{{rabbitmq_pcs_res_result.rc == 0}}'
  - name: set is_rpc_rabbitmq_bootstrap_node fact
    set_fact: is_rpc_rabbitmq_bootstrap_node={{oslo_messaging_rpc_short_bootstrap_node_name|lower
      == ansible_facts['hostname']|lower}}
  name: Prepare switch of rabbitmq image name
  when:
  - step|int == 0
- block:
  - failed_when: false
    name: Get redis image id currently used by pacemaker
    register: redis_image_current_res
    shell: pcs resource config redis-bundle | grep -Eo 'image=[^ ]+' | awk -F= '{print
      $2;}'
  - name: Image facts for redis
    set_fact:
      redis_image_current: '{{redis_image_current_res.stdout}}'
      redis_image_latest: cluster.common.tag/default-dev-osp16-2-osp16_containers-redis:pcmklatest
  - import_role:
      name: tripleo-container-tag
    name: Temporarily tag the current redis image id with the upgraded image name
    vars:
      container_image: '{{redis_image_current}}'
      container_image_latest: '{{redis_image_latest}}'
      pull_image: false
    when:
    - redis_image_current != ''
    - redis_image_current != redis_image_latest
  - changed_when: false
    failed_when: false
    name: Check redis cluster resource status
    register: redis_pcs_res_result
    shell: pcs resource config redis-bundle
  - name: Set upgrade redis facts
    set_fact:
      is_redis_bootstrap_node: '{{redis_short_bootstrap_node_name|lower == ansible_facts[''hostname'']|lower}}'
      redis_pcs_res: '{{redis_pcs_res_result.rc == 0}}'
  name: Prepare switch of redis image name
  when:
  - step|int == 0
- import_role:
    name: redhat-subscription
  name: Red Hat Subscription Management configuration
  vars:
    rhsm_activation_key: osp16-2-dev-overcloud
    rhsm_baseurl: https://satellite.mgmt.tmeprj2.comm.red.ibm.gsc/pulp/repos
    rhsm_force_register: true
    rhsm_method: satellite
    rhsm_org_id: default
    rhsm_release: 8.4
    rhsm_repos_purge: true
    rhsm_server_hostname: satellite.mgmt.tmeprj2.comm.red.ibm.gsc
  when: step|int == 0
- block:
  - command: systemctl is-enabled --quiet snmpd
    failed_when: false
    name: Check if snmpd is enabled
    register: snmpd_enabled_result
  - name: Set fact snmpd_enabled
    set_fact:
      snmpd_enabled: '{{ snmpd_enabled_result.rc == 0 }}'
  when: step|int == 0
- name: Gather missing facts
  setup:
    gather_subset: distribution
  tags:
  - always
  when: ansible_facts['distribution'] is not defined or ansible_facts['distribution_major_version']
    is not defined
- name: Set leapp facts
  set_fact:
    upgrade_leapp_command_options: ''
    upgrade_leapp_debug: true
    upgrade_leapp_devel_skip: ''
    upgrade_leapp_enabled: "{{ _upgradeLeappEnabled | bool and\n   ansible_facts['distribution']\
      \ == 'RedHat' and\n   ansible_facts['distribution_major_version'] is version('7',\
      \ '==') }}"
    upgrade_leapp_post_reboot_delay: 120
    upgrade_leapp_reboot_timeout: 3600
  tags:
  - always
  vars:
    _upgradeLeappEnabled: false
- block:
  - name: Run UpgradeInitCommand
    shell: '#!/bin/bash


      '
  - name: Run UpgradeInitCommonCommand
    shell: '#!/bin/bash


      '
  - dnf:
      name: '@{{ item.module }}:{{ item.stream }}/{{ item.profile|default(''common'')
        }}'
      state: present
    loop: '{{ dnf_module_list|list }}'
    name: Ensure DNF modules have the right stream
    vars:
      dnf_module_list: []
    when:
    - ansible_facts['distribution_major_version'] is version('8', '>=')
    - dnf_module_list|length > 0
  - delay: 10
    name: Ensure EL modules are in proper state
    register: _dnf_distro_sync
    retries: 5
    shell: dnf -y distro-sync
    until: _dnf_distro_sync is success
    when: ansible_facts['distribution_major_version'] == '8'
  - name: Clean up Python 2 packages
    package:
      name: python2-*
      state: absent
    when: ansible_facts['distribution_major_version'] == '8'
  - name: Ensure TripleO prerequisite packages are installed
    package:
      name:
      - jq
      - lvm2
      - net-snmp
      - openstack-selinux
      - os-net-config
      - puppet-tripleo
      - python3-heat-agent*
      - rsync
      state: present
    when: ansible_facts['distribution_major_version'] is version('8', '==')
  name: Package and repo update tasks
  when: step|int == 0
- name: Set boolean skip_package_update
  set_fact:
    skip_package_update: false
